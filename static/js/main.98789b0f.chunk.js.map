{"version":3,"sources":["Header.js","firebase.js","TinderCards.js","SwipeButtons.js","Chat.js","Chats.js","ChatScreen.js","App.js","serviceWorker.js","index.js"],"names":["Header","backButton","history","useHistory","className","IconButton","onClick","replace","fontSize","to","src","alt","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","TinderCards","useState","people","setPeople","useEffect","unsubscribe","collection","onSnapshot","snapshot","docs","map","doc","data","person","key","name","preventSwipe","style","backgroundImage","url","SwipeButtons","Chat","message","timestamp","profilePic","class","Avatar","Chats","ChatScreen","image","messages","setMessages","input","setInput","type","placeholder","onChange","e","target","value","preventDefault","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.98789b0f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport ForumIcon from '@material-ui/icons/Forum';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport { IconButton } from '@material-ui/core';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst Header = ({backButton}) => {\r\n    const history = useHistory();\r\n    return (\r\n        <div className='header'>\r\n            {backButton ? (\r\n                <IconButton onClick={()=> history.replace(backButton)}>\r\n                    <ArrowBackIosIcon className=\"header__icon\" fontSize=\"large\"/>\r\n                </IconButton>\r\n            ):(\r\n                <IconButton>\r\n                <PersonIcon className=\"header__icon\" fontSize=\"large\" />\r\n            </IconButton>\r\n            )}\r\n            \r\n            <Link to=\"/\">\r\n                <IconButton>\r\n                    <img className=\"header__logo\" src=\"https://cdn4.iconfinder.com/data/icons/logos-and-brands/512/338_Tinder_logo-512.png\" alt=\"tinder logo\" />\r\n                </IconButton>\r\n            </Link>\r\n\r\n            <Link to=\"/chat\">\r\n                <IconButton>\r\n                    <ForumIcon className=\"header__icon\" fontSize=\"large\" />\r\n                </IconButton>\r\n            </Link>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default Header;"," import firebase from 'firebase';\r\n \r\n // Your web app's Firebase configuration\r\n  const config = {\r\n    apiKey: \"AIzaSyCaXMyN1eHof-osSFotr99Fp_HYgck-0Bs\",\r\n    authDomain: \"test-12e00.firebaseapp.com\",\r\n    databaseURL: \"https://test-12e00.firebaseio.com\",\r\n    projectId: \"test-12e00\",\r\n    storageBucket: \"test-12e00.appspot.com\",\r\n    messagingSenderId: \"390245151105\",\r\n    appId: \"1:390245151105:web:5a9edc87b3a290157a7880\",\r\n    measurementId: \"G-65BNFJF5SQ\"\r\n  };\r\n  // Initialize Firebase\r\n  firebase.initializeApp(config);\r\n  const db = firebase.firestore();\r\n  export default db;","import React, { useState, useEffect } from 'react';\r\nimport TinderCard from 'react-tinder-card';\r\nimport './TinderCard.css'\r\nimport db from './firebase';\r\n\r\nconst TinderCards = () => {\r\nconst [people, setPeople] = useState([]);\r\n\r\nuseEffect(()=>{\r\nconst unsubscribe =  db.collection('people').onSnapshot(snapshot => (\r\n   setPeople(snapshot.docs.map(doc => doc.data())\r\n   )));\r\n   return () =>{\r\n       unsubscribe();// this is the cleanup...\r\n   };\r\n}, [] );//run once then the component loads\r\n\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"tinderCards__cardContainer\">\r\n            {people.map(person => (\r\n                <TinderCard\r\n                className=\"swipe\"\r\n                key={person.name }\r\n                preventSwipe={['up','down']}\r\n                >\r\n                    <div style={{backgroundImage: `url(${person.url})`}}\r\n                    className=\"card\">\r\n            <h3>{person.name}</h3>\r\n\r\n                    </div>\r\n                    </TinderCard>\r\n                   \r\n            ))}\r\n             </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TinderCards;","import React from 'react';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport GradeIcon from '@material-ui/icons/Grade';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\r\nimport './SwipeButtons.css';\r\nimport { IconButton } from '@material-ui/core';\r\n\r\nconst SwipeButtons = () => {\r\n    return (\r\n        <div className=\"swipebuttons\">\r\n            <IconButton>\r\n                <ReplayIcon className=\"replay\" fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton>\r\n                <ClearIcon className=\"clear\" fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton>\r\n\r\n                < GradeIcon className=\"star\" fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton>\r\n                <FavoriteIcon className=\"hart\" fontSize=\"large\" />\r\n            </IconButton>\r\n            <IconButton>\r\n                <FlashOnIcon className=\"flash\" fontSize=\"large\" />\r\n            </IconButton>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\nexport default SwipeButtons;","import React from 'react';\r\nimport './Chat.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\n\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\n\r\nconst Chat = ({name, message, timestamp, profilePic}) =>{\r\n    return(\r\n        <Link to={`/chat/${name}`}>\r\n        <div class=\"chat\"> \r\n<Avatar className=\"chat__image\"  src={profilePic} />\r\n<div className=\"chat__details\" >\r\n    <h2>{name}</h2>\r\n    <p>{message}</p>\r\n</div >\r\n    <p className=\"timestamp\">{timestamp}</p>\r\n        </div>\r\n        </Link>\r\n    )\r\n}\r\nexport default Chat;","import React from 'react';\r\nimport Chat from './Chat';\r\n\r\nconst Chats = () =>{\r\n    return(\r\n        <div className=\"carts\">\r\n              <Chat\r\n              name=\"Gal \"\r\n              message=\"Yooo whats uppp!\"\r\n              timestamp=\"20 sec\"\r\n              profilePic=\"https://m.media-amazon.com/images/M/MV5BMjUzZTJmZDItODRjYS00ZGRhLTg2NWQtOGE0YjJhNWVlMjNjXkEyXkFqcGdeQXVyMTg4NDI0NDM@._V1_.jpg\"\r\n              /> \r\n                <Chat\r\n              name=\"Rachel \"\r\n              message=\"Hallo!\"\r\n              timestamp=\"50 sec\"\r\n              profilePic=\"https://gossipgist.com/uploads/28612/rachel-mcadams.png\"\r\n              /> \r\n                <Chat\r\n              name=\"Beyoncé \"\r\n              message=\"Hi!\"\r\n              timestamp=\"30 sec\"\r\n              profilePic=\"https://www.biography.com/.image/ar_1:1%2Cc_fill%2Ccs_srgb%2Cg_face%2Cq_auto:good%2Cw_300/MTU0MTU0MTc3NzkzMTA3MzU1/beyonce-attends-tidal-x-1015-on-october-15-2016-in-new-york-city-photo-by-theo-wargogetty-images-for-tidal-sqaure.jpg\"\r\n              /> \r\n                <Chat\r\n              name=\"Jenifer\"\r\n              message=\"Ola\"\r\n              timestamp=\"20 sec\"\r\n              profilePic=\"https://img.resized.co/spin1038/eyJkYXRhIjoie1widXJsXCI6XCJodHRwczpcXFwvXFxcL21lZGlhLnJhZGlvY21zLm5ldFxcXC91cGxvYWRzXFxcLzIwMjBcXFwvMDVcXFwvMjExMDM3MzhcXFwvU1BMNTA3NzM2MF8wMDEtZTE1OTAwNTM4NzQ4MjYtMTAyNHg1NDkuanBnXCIsXCJ3aWR0aFwiOjQ1NixcImhlaWdodFwiOjIyOCxcImRlZmF1bHRcIjpcImh0dHBzOlxcXC9cXFwvd3d3LnNwaW4xMDM4LmNvbVxcXC9pbWFnZXNcXFwvbm8taW1hZ2UucG5nXCJ9IiwiaGFzaCI6IjkyOWMyOTBlZjFiMzU0MDhjZTgzZTVjYzM4YmUzM2MzZGE0MmIyZTkifQ==/the-mystery-man-in-the-background-of-j-lo-s-instagram-post-has-been-explained.jpg\"\r\n              /> \r\n        </div>\r\n    )\r\n}\r\nexport default Chats;","import React, { useState } from 'react';\r\nimport './ChatScreen.css'\r\nimport { Avatar } from '@material-ui/core';\r\n\r\n\r\n\r\nconst ChatScreen = () => {\r\nconst [messages, setMessages] = useState(\r\n   [ {\r\n        name: 'Gal',\r\n        image: 'https://m.media-amazon.com/images/M/MV5BMjUzZTJmZDItODRjYS00ZGRhLTg2NWQtOGE0YjJhNWVlMjNjXkEyXkFqcGdeQXVyMTg4NDI0NDM@._V1_.jpg',\r\n        message: 'Whats up???'\r\n    },\r\n    {\r\n        name: 'Gal' ,\r\n        image: 'https://m.media-amazon.com/images/M/MV5BMjUzZTJmZDItODRjYS00ZGRhLTg2NWQtOGE0YjJhNWVlMjNjXkEyXkFqcGdeQXVyMTg4NDI0NDM@._V1_.jpg',\r\n        message: 'Come and get me?'\r\n    },{\r\n        message:\"Nice.\"\r\n    }\r\n   \r\n   ]);\r\n   const [input, setInput] =useState('');\r\n\r\n   const submitHandler = e =>{\r\n       e.preventDefault();\r\n       setMessages([...messages, {message: input }]);\r\n       setInput(\"\");\r\n   }\r\n\r\n    return(\r\n        <div className=\"chatscreen\" > \r\n          {messages.map((message)=>(\r\n              message.name? (\r\n                <div className=\"chat__message\">\r\n                <Avatar\r\n                className=\"chat__avatar\"\r\n                src={message.image}\r\n                />\r\n            <p className=\"chat__text\">{message.message}</p>\r\n            </div>\r\n              ):(\r\n                  \r\n             <div className=\"chat__message\">\r\n              <p className=\"chat__textUser\">{message.message}</p>\r\n              </div>\r\n              )\r\n          ))}\r\n          <div >\r\n              <form className=\"chat__input\">\r\n                  <input\r\n                   type=\"text\"\r\n                    className=\"input\" \r\n                    placeholder=\"type a message....\"\r\n                    onChange={(e)=> setInput(e.target.value)}\r\n                    />\r\n                  <button type=\"submit\" onClick={submitHandler} className=\"chat__button\" >SEND</button>\r\n              </form>\r\n          </div>\r\n        </div>\r\n    );\r\n}\r\nexport default ChatScreen","import React from 'react';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport './App.css';\r\nimport Header from './Header';\r\nimport TinderCards from './TinderCards'\r\nimport SwipeButtons from './SwipeButtons';\r\nimport Chats from './Chats';\r\nimport ChatScrren from './ChatScreen';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n      <Router>\r\n<Switch>\r\n  \r\n  <Route exact path=\"/\">\r\n  <Header />\r\n    <TinderCards/>\r\n    <SwipeButtons/>\r\n    </Route>\r\n  <Route exact path=\"/chat\">\r\n  <Header backButton=\"/\"/>\r\n     <Chats/>\r\n     </Route>\r\n\r\n     <Route path=\"/chat/:person\">\r\n  <Header backButton=\"/chat\"/>\r\n     <ChatScrren/>\r\n     </Route>\r\n</Switch>\r\n</Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}